1. react受控组件和非受控组件的选择？
2. NodeJS的优点、好处？为什么选择NodeJS?
3. 项目结构？

4. vite的优缺点？和webpack的对比？
(1).定义：
    Vite 的发音为 /vit/，在法语中是“快速”或“迅捷”的意思，不得不说 Vite 名副其实。
    简而言之，Vite 是一种现代 JS 构建工具，为常见 Web 模式提供开箱即用的支持和构建优化，兼具 rollup 的自由度和成熟度。
    Vite 还与 esbuild 和原生 ES 模块强强联手，实现快速无打包开发服务器。
    Vite 是由“Vue 之父”尤雨溪（Evan You）构思出来的，旨在通过减少开发者在启动开发服务器和处理文件编辑后重载时遭遇的性能瓶颈，简化打包过程。
(2).核心特性：
  a. 运行 Vite 时，你会注意到的第一个区别在于，开发服务器会即时启动。这是因为，Vite 采用按需方法将你的应用程序提供给浏览器。
  Vite 不会首先打包整个源码，而是响应浏览器请求，将你编写的模块即时转换为浏览器可以理解的原生 ESM 模块。

  b. 每当你在开发期间更改项目中的任意文件时，Vite 都会使用应用程序的模块图，只热重载受影响的模块（HMR）。这允许开发者预览他们的更改，及其对应用程序的影响。
  Vite 的 HMR 速度惊人，可以让编辑器自动保存，并获得类似于在浏览器开发工具中修改 CSS 时的反馈循环。

  c. Vite 还执行 依赖预构建（dependency pre-bundling）。在开发过程中，Vite 使用 esbuild 来打包你的依赖并缓存，加快未来服务器的启动速度。
  此优化步骤还有助于加快 lodash 等导出许多迷你模块的依赖的加载时间，因为浏览器只加载每个依赖的代码块（chunk）。
  这还允许 Vite 在依赖中支持 CJS 和 UMD 代码，因为它们被打包到原生 ESM 模块中。

  d. 当你准备好部署时，Vite 将使用优化的 rollup 设置来构建你的应用程序。Vite 会执行 CSS 代码分割，添加预加载指令，并优化异步块的加载，无需任何配置。
  Vite 提供了一个通用的 rollup 兼容插件 API，适用于开发和生产，使你可以更轻松地扩展和自定义构建过程。

(3). 优势:
  a. 开源且独立；b.本地敏捷开发；c.广泛的生态系统支持；d.易于扩展；

(4). 未来：
  a. Vite 目前使用 rollup 进行生产构建（product环境），这比 esbuild 或 Bun 等原生打包器慢得多。
  Vite 还尽可能减少开发和生产环境之间的不一致性，但考虑到 rollup 和 esbuild 之间的差异，某些不一致性无法避免。

  d. 尤雨溪现在领导一个新团队开发 rolldown，这是一个基于 Rust 的 rollup 移植，在 “JS 氧化编译器 OXC”之上构建了最大的兼容性。
  这个主意是用 rolldown 替代 Vite 中的 rollup 和 esbuild。Vite 将拥有一个单独基建，兼具 rollup 的自由度和 esbuild 的速度，消除不一致性，使代码库更易于维护，并加快构建时间。
  rolldown 目前处于早期阶段，但已经显示出有希望的结果。rolldown 现已开源，rolldown 团队正在寻找贡献者来辅助实现这一愿景。

  c. 与此同时，Vite 团队在每个版本中不断改良 Vite。这项工作从上游的为 Vitest 和 Nuxt Dev SSR 提供动力的引擎 vite-node 开始，现已发展成为框架作者对 Vite API 的完整修订版。
  新版 Environment API 预计在 Vite 6 中发布，这将是自 Vite 2 发布以来 Vite 最大的变化之一。这将允许在任意数量的环境中通过 Vite 插件管道运行代码，解锁对 worker、RSC 等的一流支持。

Vite 正在开辟一条前进的道路，并迅速成为 JS 生态系统事实上的构建工具。

5. 为什么要写单元测试？
6. 如何寻找stage环境的错误？如何解决错误？如何利用日志文件？
7. 如何确定react组件中effect是否执行多次？如何调试？(diff 算法，重新渲染或不渲染)(https://segmentfault.com/a/1190000017152570)
8. 前端项目的技术选型？react、nextjs? 如何选择？
9. react循环时添加key的原因？key的添加原则？
10. 使用react和ts创建一个自定义定时器hook: 该定时器hook自减到0后就自动停止，可以控制开始、暂停、再开始、停止。

初始化react-demo:
npx create-react-app my-react-typescript-app --template typescript