枚举:
使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript支持数字的和基于字符串的枚举。

1. 数字枚举
2. 字符串枚举
3.异构枚举（Heterogeneous enums）:从技术的角度来说，枚举可以混合字符串和数字成员 (不推荐使用)
4.计算的和常量成员
(1). 常量：
a. 它是枚举的第一个成员且没有初始化器，这种情况下它被赋予值 0；
b. 它不带有初始化器且它之前的枚举成员是一个 数字常量。 这种情况下，当前枚举成员的值为它上一个枚举成员的值加1；
c. 枚举成员使用 常量枚举表达式初始化。 常数枚举表达式是TypeScript表达式的子集，它可以在编译阶段求值。 当一个表达式满足下面条件之一时，它就是一个常量枚举表达式：
一个枚举表达式字面量（主要是字符串字面量或数字字面量）
一个对之前定义的常量枚举成员的引用（可以是在不同的枚举类型中定义的）
带括号的常量枚举表达式
一元运算符 +, -, ~其中之一应用在了常量枚举表达式
常量枚举表达式做为二元运算符 +, -, *, /, %, <<, >>, >>>, &, |, ^的操作对象。 若常数枚举表达式求值后为 NaN或 Infinity，则会在编译阶段报错。
所有其它情况的枚举成员被当作是需要计算得出的值。

5.联合枚举与枚举成员的类型:
(1). 存在一种特殊的非计算的常量枚举成员的子集：字面量枚举成员。 字面量枚举成员是指不带有初始值的常量枚举成员，或者是值被初始化为:
任何字符串字面量（例如： "foo"， "bar"， "baz"）
任何数字字面量（例如： 1, 100）
应用了一元 -符号的数字字面量（例如： -1, -100）
当所有枚举成员都拥有字面量枚举值时，它就带有了一种特殊的语义。
(2). 另一个变化是枚举类型本身变成了每个枚举成员的 联合。 虽然我们还没有讨论[联合类型]

6. 运行时的枚举: 枚举是在运行时真正存在的对象

7.反向映射:
除了创建一个以属性名做为对象成员的对象之外，数字枚举成员还具有了 反向映射，从枚举值到枚举名字。

8. const枚举
大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 
为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 const枚举。 

9. 外部枚举???(没用过，不太懂)
外部枚举和非外部枚举之间有一个重要的区别：
在正常的枚举里，没有初始化方法的成员被当成常数成员。 
对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。


10. 枚举 VS 常量枚举：
（1）. 大多数情况下，枚举是十分有效的方案。
（2）. 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 const枚举。 常量枚举通过在枚举上使用 const修饰符来定义。
（3）. 枚举可以包含计算得出的值，且会生成真实的对象。
（4）. 常量枚举只能使用常量枚举表达式，并且不同于常规的枚举，它们在编译阶段会被删除。 
       常量枚举成员在使用的地方会被内联进来。 之所以可以这么做是因为，常量枚举不允许包含计算成员。
