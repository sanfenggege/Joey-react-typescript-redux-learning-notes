1. 为函数（具名函数&匿名函数）定义类型:
我们可以给每个参数添加类型之后再为函数本身添加返回值类型。 TypeScript能够根据返回语句自动推断出返回值类型，因此我们通常省略它。
函数类型包含两部分：参数类型和返回值类型。 当写出完整函数类型的时候，这两部分都是需要的。

（1）. 参数类型：我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。 
只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。

（2）. 返回值类型：对于返回值，我们在函数和返回值类型之前使用( =>)符号，使之清晰明了。 如之前提到的，返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为 void而不能留空。
let myAdd: (baseValue: number, increment: number) => number = function(x: number, y: number): number { return x + y; };

（3）可选参数和默认参数：
在参数名旁使用 ? 实现可选参数的功能(可选参数必须跟在必须参数后面) || 也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是undefined时。 它们叫做有默认初始化值的参数。
二者区别： 与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入 undefined值来获得默认值。
function buildName(firstName = "Will", lastName: string) {
    return firstName + " " + lastName;
}
let result1 = buildName("Bob");                  // error, too few parameters
let result2 = buildName("Bob", "Adams", "Sr.");  // error, too many parameters
let result3 = buildName("Bob", "Adams");         // okay and returns "Bob Adams"
let result4 = buildName(undefined, "Adams");     // okay and returns "Will Adams"

（4）.剩余参数：剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 
编译器创建参数数组，名字是你在省略号（ ...）后面给定的名字，你可以在函数体内使用这个数组。
function buildName(firstName: string, ...restOfName: string[]) {
  return firstName + " " + restOfName.join(" ");
}
let buildNameFun: (fname: string, ...rest: string[]) => string = buildName;

2. This：
understand Javascript this: https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/
存疑：this参数在回调函数里的工作
如果设置了--noImplicitThis（箭头函数中的this就不能为any？）